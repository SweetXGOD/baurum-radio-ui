export class TelegramMonitor {
  constructor() {
    this.API_URL = 'https://api.telegram.org/bot'
    this.chatId = null
  }

  async initialize(botToken) {
    this.botToken = botToken
    await this.getChatId()
    setInterval(() => this.sendStatusUpdate(), 300000) // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  async sendStatusUpdate() {
    const message = `üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${window.BAURUM_SYSTEM?.core?.users.size || 0}
üéµ –°–∏–≥–Ω–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: ${window.BAURUM_SYSTEM?.core?.isActive ? '–î–∞' : '–ù–µ—Ç'}
üìà –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: ${window.BAURUM_SYSTEM?.core?.currentStage}

${new Date().toLocaleString('ru-RU')}`

    await this.sendMessage(message)
  }

  async sendAlert(message) {
    await this.sendMessage(`üö® ALERT: ${message}`)
  }

  async sendMessage(text) {
    if (!this.chatId) return
    
    try {
      const response = await fetch(
        `${this.API_URL}${this.botToken}/sendMessage`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: this.chatId,
            text: text,
            parse_mode: 'HTML'
          })
        }
      )
      return await response.json()
    } catch (error) {
      console.error('Telegram error:', error)
    }
  }
}