import { SYSTEM_CONFIG } from '../config/systemConfig'
import { AudioSteganography } from '../utils/cryptoUtils'

export class BaurumCore {
  constructor() {
    this.users = new Map()
    this.isActive = false
    this.currentStage = 1
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
  async initialize() {
    console.log('üßô –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BAURUM CORE...')
    this.isActive = true
    this.startSignalService()
  }

  // –°–µ—Ä–≤–∏—Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  startSignalService() {
    setInterval(() => {
      if (this.isActive) {
        this.generateLearningSignal()
      }
    }, SYSTEM_CONFIG.learning.stages[this.currentStage - 1].duration * 1000)
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
  generateLearningSignal() {
    const signals = this.getLearningSignals()
    const encryptedSignal = AudioSteganography.encodeSignal(
      this.getCurrentAudio(),
      signals
    )
    
    this.broadcastSignal(encryptedSignal)
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  trackUserBehavior(userId, behavior) {
    const user = this.users.get(userId) || {
      progress: 0,
      stage: 1,
      sessions: [],
      preferences: []
    }
    
    user.sessions.push({
      timestamp: Date.now(),
      behavior: behavior
    })
    
    this.users.set(userId, user)
    this.updateUserProgress(userId)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  updateUserProgress(userId) {
    const user = this.users.get(userId)
    const progress = this.calculateProgress(user)
    
    if (progress >= SYSTEM_CONFIG.learning.progressThreshold) {
      user.stage++
      user.progress = 0
      console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —ç—Ç–∞–ø ${user.stage}`)
    }
    
    this.users.set(userId, user)
  }
}